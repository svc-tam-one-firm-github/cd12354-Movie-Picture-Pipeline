name: frontend-cd-workflow

# Ensure the workflow
on:
    workflow_dispatch:
    pull_request:
        branches:
        - main


# Jobs defined in the workflow
jobs:
    linting:
      runs-on: ubuntu-latest
      steps:
        - name: Checkout code
          uses: actions/checkout@v3
  
        - name: Set up Node.js 
          uses: actions/setup-node@v3
          with:
            node-version: 16
            cache: 'npm'
            cache-dependency-path: starter/frontend/package-lock.json

        - name: Install dependencies
          run: cd starter/frontend && npm ci
  
        - name: Run the linter.
          run: cd starter/frontend && npm run lint
  
  
    testing:
      runs-on: ubuntu-latest
      steps:
        - name: Checkout code
          uses: actions/checkout@v3
  
        - name: Set up Node.js 
          uses: actions/setup-node@v3
          with:
            node-version: 16
            cache: 'npm'
            cache-dependency-path: starter/frontend/package-lock.json

        - name: Install dependencies
          run: cd starter/frontend && npm ci
  
        - name: Run tests
          run: cd starter/frontend && npm test


    build-actions:
      needs: [linting, testing]
      runs-on: ubuntu-latest
      steps:
        - name: Checkout code
          uses: actions/checkout@v3
  
        - name: Set up Node.js 
          uses: actions/setup-node@v3
          with:
            node-version: 16
            cache: 'npm'
            cache-dependency-path: starter/frontend/package-lock.json

        - name: Install dependencies
          run: cd starter/frontend && npm ci
  
        - name: Build and run frontend container
          working-directory: starter/frontend
          run: |
            docker build --build-arg=REACT_APP_MOVIE_API_URL=http://localhost:5000 --tag=mp-frontend:latest .

        
        - name: Configure AWS credentials
          uses: aws-actions/configure-aws-credentials@v2
          with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
            aws-region: ${{ vars.AWS_DEFAULT_REGION }}


        - name: Login to AWS ECR
          id: login-ecr
          uses: aws-actions/amazon-ecr-login@v1


        - name: Push Docker Image to AWS ECR
          working-directory: starter/frontend
          env:
            ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
          run: |
            docker build --build-arg=REACT_APP_MOVIE_API_URL=http://localhost:5000 --tag $ECR_REGISTRY:latest .
            docker push $ECR_REGISTRY:latest

        - name: Deploy Docker Image to Amazon EKS using kubectl
          working-directory: starter/frontend/k8s
          run: |
            pwd
            aws eks update-kubeconfig --name capstone-cluster
            kustomize edit set image frontend=$ECR_REGISTRY:latest
            kustomize build | kubectl apply -f -

