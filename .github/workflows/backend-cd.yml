name: Backend Continuous Deployment

# Ensure the workflow
on:
    workflow_dispatch:
    pull_request:
        branches:
        - main


# Jobs defined in the workflow
jobs:
    linting:
      runs-on: ubuntu-latest
      steps:
        - name: Checkout code
          uses: actions/checkout@v3
  
        - name: Set up Python 3
          uses: actions/setup-python@v4
          with:
            python-version: "3.10"
            

        - name: Install dependencies
          run: |
            python -m pip install --upgrade pip
            pip install pipenv
            pip install flake8
  
        - name: Run the lint check
          run: cd starter/backend && pipenv run lint
            
  
    testing:
      runs-on: ubuntu-latest
      steps:
        - uses: actions/checkout@v3
        - uses: actions/setup-python@v4
          with:
            python-version: '3.10' 

        - name: Install dependencies
          run: |
            python -m pip install --upgrade pip
            pip install pipenv
            pipenv install --dev

        - name: Run the Test check
          run: | 
            cd starter/backend
            pipenv install pytest
            pipenv run test
          
          
    build-actions:
      needs: [linting, testing]
      runs-on: ubuntu-latest
      steps:
        - uses: actions/checkout@v3

        - name: Build the Docker image
          run: | 
            cd starter/backend
            docker build --tag mp-backend:latest .

        
        - name: Configure AWS credentials
          uses: aws-actions/configure-aws-credentials@v2
          with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
            aws-region: ${{ vars.AWS_DEFAULT_REGION }}
  
  
        - name: Login to AWS ECR
          id: login-ecr
          uses: aws-actions/amazon-ecr-login@v1

  
        - name: Push Docker Image to AWS ECR
          working-directory: starter/backend
          env:
            ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
          run: |
            docker build --tag $ECR_REGISTRY:backend .
            docker push $ECR_REGISTRY:backend
  
        - name: Deploy Docker Image Application to Amazon EKS using kubectl
          working-directory: starter/frontend/k8s
          run: |
            pwd
            aws eks update-kubeconfig --name capstone-cluster
            kustomize edit set image backend=$ECR_REGISTRY:backend
            kustomize build | kubectl apply -f -
    
